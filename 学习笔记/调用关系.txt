
---CallAdapter
适配调用，默认适配的是主线程回调，另外还有RxJava适配的Observable
serviceMethod.callAdapter.adapt(okHttpCall);
1、默认适配的是ExecutorCallAdapterFactory.ExecutorCallbackCall
2、适配Rxjava
RxJavaCallAdapterFactory.SimpleCallAdapter.adapt(okHttpCall)
@Override
public <R> Observable<R> adapt(Call<R> call) { // OkHttpCall
  Observable<R> observable = Observable.create(new CallOnSubscribe<>(call)) //
      .lift(OperatorMapResponseToBodyOrError.<R>instance());
  if (scheduler != null) {
    return observable.subscribeOn(scheduler);
  }
  return observable;
}

 static final class CallOnSubscribe<T> implements Observable.OnSubscribe<Response<T>> {
    private final Call<T> originalCall; //OkHttpCall

    CallOnSubscribe(Call<T> originalCall) {
      this.originalCall = originalCall;
    }

    @Override public void call(final Subscriber<? super Response<T>> subscriber) {

      Call<T> call = originalCall.clone();
      RequestArbiter<T> requestArbiter = new RequestArbiter<>(call, subscriber);
      subscriber.add(requestArbiter);
      subscriber.setProducer(requestArbiter);
    }
  }

    static final class RequestArbiter<T> extends AtomicBoolean implements Subscription, Producer {
      private final Call<T> call; //OkHttpCall
      private final Subscriber<? super Response<T>> subscriber;

      RequestArbiter(Call<T> call, Subscriber<? super Response<T>> subscriber) {
        this.call = call;
        this.subscriber = subscriber;
      }

      @Override public void request(long n) {
        try {
          Response<T> response = call.execute(); //OkHttpCall.execute()->OkHttp.execute()->parseResponse()->Response<T>
          if (!subscriber.isUnsubscribed()) {
            subscriber.onNext(response); //回调给调用者
          }
        } catch (Throwable t) {
          Exceptions.throwIfFatal(t);
          if (!subscriber.isUnsubscribed()) {
            subscriber.onError(t);
          }
          return;
        }

        if (!subscriber.isUnsubscribed()) {
          subscriber.onCompleted();
        }
      }
    }

---ResponseConverter
转换Okhttp响应结果

---OkHttpCall
持有ServiceMethod，解析相关注解参数，生成Request，使用OkHttp请求网络。

Retrofit retrofit = new Retrofit.Builder()
        .baseUrl("http://api-beauty.51yishijia.com/")
        .addConverterFactory(GsonConverterFactory.create())
        .client(HttpClientProvider.build())
        .build();

 一、create
 **** VersionUpdateService versionUpdateService = retrofit.create(VersionUpdateService.class);

    public <T> T create(final Class<T> service) {
        return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},
                new InvocationHandler() {
                    private final Platform platform = Platform.get();

                    @Override
                    public Object invoke(Object proxy, Method method, Object... args)
                            throws Throwable {

                        //解析method，并包装成ServiceMethod,
                        ServiceMethod serviceMethod = loadServiceMethod(method);

                        //使用Okhttp完成网络请求
                        OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);
                        return serviceMethod.callAdapter.adapt(okHttpCall); //返回的是 ExecutorCallbackCall
                    }
                });
    }


客户端调用：
 Call<VersionEntity> call = versionUpdateService.doGet(path_v1, query, queryMap, head3, headMap);
    call.enqueue(new Callback<VersionEntity>() {
            @Override
            public void onResponse(Call<VersionEntity> call, retrofit2.Response<VersionEntity> response) {
            }

            @Override
            public void onFailure(Call<VersionEntity> call, Throwable t) {

            }
        });
执行流程：
1）call=ExecutorCallbackCall
OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);
return serviceMethod.callAdapter.adapt(okHttpCall); //返回的是 ExecutorCallbackCall
2）ExecutorCallbackCall.enqueue() ->OkHttpCall.enqueue()->OkHttp.enqueue()
3)执行完OkHttp请求后，调用 Response<T> response=responseConverter.convert(ResponseBody) 转换结果
4）回调Response<T>
OkHttp->OkHttpCall->ExecutorCallbackCall->然后通过MainThreadExecutor回调到主线程中

1、loadServiceMethod 解析注解参数，创建CallAdapter和ResponseConverter
final class ServiceMethod<T> {
    public Builder(Retrofit retrofit, Method method) {
      this.retrofit = retrofit;
      this.method = method;
      this.methodAnnotations = method.getAnnotations();
      this.parameterTypes = method.getGenericParameterTypes();
      this.parameterAnnotationsArray = method.getParameterAnnotations();
    }

    public ServiceMethod build() {
      callAdapter = createCallAdapter(); //默认是ExecutorCallAdapterFactory(MainThreadExecutor)
      responseConverter = createResponseConverter(); //默认是BuiltInConverters
      }
 }

2、创建OkHttpCall ，使用Okhttp完成网络请求
 OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);
3、serviceMethod.callAdapter.adapt(okHttpCall);
-> ExecutorCallAdapterFactory.adapter(okhttpCall)
   ->返回 new ExecutorCallbackCall<>(callbackExecutor, call);


Call<VersionEntity> call = versionUpdateService.doGet(path_v1); //实际返回的是ExecutorCallbackCall

4、ExecutorCallbackCall.enqueue() ->OkHttpCall.enqueue()
客户端调用
    call.enqueue(new Callback<VersionEntity>() {
            @Override
            public void onResponse(Call<VersionEntity> call, retrofit2.Response<VersionEntity> response) {
            }

            @Override
            public void onFailure(Call<VersionEntity> call, Throwable t) {

            }
        });


  static final class ExecutorCallbackCall<T> implements Call<T> {
    final Executor callbackExecutor;// 其实是MainThreadExecutor
    final Call<T> delegate; //其实是OkHttpCall

    ExecutorCallbackCall(Executor callbackExecutor, Call<T> delegate) {
      this.callbackExecutor = callbackExecutor;
      this.delegate = delegate;
    }

    @Override
    public void enqueue(final Callback<T> callback) {
      delegate.enqueue(new Callback<T>() {
            @Override
            public void onResponse(Call<T> call, final Response<T> response) {
              callbackExecutor.execute(new Runnable() { //回调到主线程
                    @Override
                    public void run() {
                          if (delegate.isCanceled()) {
                            callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));
                          } else {
                            callback.onResponse(ExecutorCallbackCall.this, response);
                          }
                    }
                  });
            }

            @Override
            public void onFailure(Call<T> call, final Throwable t) {
              callbackExecutor.execute(new Runnable() { // 回调到主线程
                    @Override
                    public void run() {
                      callback.onFailure(ExecutorCallbackCall.this, t);
                    }
                  });
            }
          });
    }

------ OkHttpCall.enqueue()
final class OkHttpCall<T> implements Call<T> {

  @Override
  public void enqueue(final Callback<T> callback) {

  //将接口方法相关参数 转换为实际的OkHttp请求    Request request = serviceMethod.toRequest(args);    okhttp3.Call call = serviceMethod.callFactory.newCall(request);//OkHttpClient.newCall(request)
   okhttp3.Call call = createRawCall();

    //OkHttp执行网络请求
    call.enqueue(new okhttp3.Callback() {
      @Override
      public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse){

       rawResponse = rawResponse.newBuilder()
        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength())) //默认返回给用户的是ResponseBody
        .build();
        Response<T>  response = parseResponse(rawResponse); //解析Http 响应信息
        callSuccess(response); //请求成功回调
      }

    });
  }

//解析网络响应,将Response<T> 回调给ExecutorCallbackCall，然后通过MainThreadExecutor回调给主线程
  Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {
      ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);
      T body = serviceMethod.toResponse(catchingBody); //调用responseConverter.convert(body);
      return Response.success(body, rawResponse);
  }
}

  T toResponse(ResponseBody body) throws IOException {
    return responseConverter.convert(body);
  }



--------------------------------













